0 choice
1 prompt
2 "Preemption
3 Model"
4 default
5 PREEMPT_NONE
6 config
7 bool
8 "No
9 Forced
10 Preemption
11 (Server)"
12 help
13 This
14 is
15 the
16 traditional
17 Linux
18 preemption
19 model,
20 geared
21 towards
22 throughput.
23 It
24 will
25 still
26 provide
27 good
28 latencies
29 most
30 of
31 time,
32 but
33 there
34 are
35 no
36 guarantees
37 and
38 occasional
39 longer
40 delays
41 possible.
42 Select
43 this
44 option
45 if
46 you
47 building
48 a
49 kernel
50 for
51 server
52 or
53 scientific/computation
54 system,
55 want
56 to
57 maximize
58 raw
59 processing
60 power
61 kernel,
62 irrespective
63 scheduling
64 latencies.
65 PREEMPT_VOLUNTARY
66 "Voluntary
67 Kernel
68 (Desktop)"
69 reduces
70 latency
71 by
72 adding
73 more
74 "explicit
75 points"
76 code.
77 These
78 new
79 points
80 have
81 been
82 selected
83 reduce
84 maximum
85 rescheduling,
86 providing
87 faster
88 application
89 reactions,
90 at
91 cost
92 slightly
93 lower
94 allows
95 reaction
96 interactive
97 events
98 allowing
99 low
100 priority
101 process
102 voluntarily
103 preempt
104 itself
105 even
106 it
107 in
108 mode
109 executing
110 system
111 call.
112 applications
113 run
114 'smoothly'
115 when
116 under
117 load.
118 desktop
119 system.
120 PREEMPT
121 "Preemptible
122 (Low-Latency
123 Desktop)"
124 select
125 PREEMPT_COUNT
126 making
127 all
128 code
129 (that
130 not
131 critical
132 section)
133 preemptible.
134 permitting
135 be
136 preempted
137 involuntarily
138 call
139 would
140 otherwise
141 about
142 reach
143 natural
144 point.
145 load,
146 throughput
147 slight
148 runtime
149 overhead
150 embedded
151 with
152 requirements
153 milliseconds
154 range.
155 endchoice
156 #!/usr/bin/perl
157 #
158 -----------------------------------------------------------------------
159 Copyright
160 2007-2008
161 rPath,
162 Inc.
163 -
164 All
165 Rights
166 Reserved
167 file
168 part
169 made
170 available
171 terms
172 GNU
173 General
174 Public
175 License
176 version
177 2
178 (at
179 your
180 option)
181 any
182 later
183 version;
184 incorporated
185 herein
186 reference.
187 Usage:
188 timeconst.pl
189 HZ
190 >
191 timeconst.h
192 Precomputed
193 values
194 systems
195 without
196 Math::BigInt
197 Generated
198 by:
199 --can
200 24
201 32
202 48
203 64
204 100
205 122
206 128
207 200
208 250
209 256
210 300
211 512
212 1000
213 1024
214 1200
215 %canned_values
216 =
217 (
218 =>
219 [
220 '0xa6aaaaab','0x2aaaaaa',26,
221 125,3,
222 '0xc49ba5e4','0x1fbe76c8b4',37,
223 3,125,
224 '0xa2c2aaab','0xaaaa',16,
225 125000,3,
226 '0xc9539b89','0x7fffbce4217d',47,
227 3,125000,
228 ],
229 '0xfa000000','0x6000000',27,
230 125,4,
231 '0x83126e98','0xfdf3b645a',36,
232 4,125,
233 '0xf4240000','0x0',17,
234 31250,1,
235 '0x8637bd06','0x3fff79c842fa',46,
236 1,31250,
237 '0xa6aaaaab','0x6aaaaaa',27,
238 125,6,
239 '0xc49ba5e4','0xfdf3b645a',36,
240 6,125,
241 '0xa2c2aaab','0x15555',17,
242 62500,3,
243 '0xc9539b89','0x3fffbce4217d',46,
244 3,62500,
245 '0xfa000000','0xe000000',28,
246 125,8,
247 '0x83126e98','0x7ef9db22d',35,
248 8,125,
249 '0xf4240000','0x0',18,
250 15625,1,
251 '0x8637bd06','0x1fff79c842fa',45,
252 1,15625,
253 '0xa0000000','0x0',28,
254 10,1,
255 '0xcccccccd','0x733333333',35,
256 1,10,
257 '0x9c400000','0x0',18,
258 10000,1,
259 '0xd1b71759','0x1fff2e48e8a7',45,
260 1,10000,
261 '0x8325c53f','0xfbcda3a',28,
262 500,61,
263 '0xf9db22d1','0x7fbe76c8b',35,
264 61,500,
265 '0x8012e2a0','0x3ef36',18,
266 500000,61,
267 '0xffda4053','0x1ffffbce4217',45,
268 61,500000,
269 '0xfa000000','0x1e000000',29,
270 125,16,
271 '0x83126e98','0x3f7ced916',34,
272 16,125,
273 '0xf4240000','0x40000',19,
274 15625,2,
275 '0x8637bd06','0xfffbce4217d',44,
276 2,15625,
277 '0xa0000000','0x0',29,
278 5,1,
279 '0xcccccccd','0x333333333',34,
280 1,5,
281 '0x9c400000','0x0',19,
282 5000,1,
283 '0xd1b71759','0xfff2e48e8a7',44,
284 1,5000,
285 '0x80000000','0x0',29,
286 4,1,
287 '0x80000000','0x180000000',33,
288 1,4,
289 '0xfa000000','0x0',20,
290 4000,1,
291 '0x83126e98','0x7ff7ced9168',43,
292 1,4000,
293 '0xfa000000','0x3e000000',30,
294 125,32,
295 '0x83126e98','0x1fbe76c8b',33,
296 32,125,
297 '0xf4240000','0xc0000',20,
298 15625,4,
299 '0x8637bd06','0x7ffde7210be',43,
300 4,15625,
301 '0xd5555556','0x2aaaaaaa',30,
302 10,3,
303 '0x9999999a','0x1cccccccc',33,
304 3,10,
305 '0xd0555556','0xaaaaa',20,
306 10000,3,
307 '0x9d495183','0x7ffcb923a29',43,
308 3,10000,
309 '0xfa000000','0x7e000000',31,
310 125,64,
311 '0x83126e98','0xfdf3b645',32,
312 64,125,
313 '0xf4240000','0x1c0000',21,
314 15625,8,
315 '0x8637bd06','0x3ffef39085f',42,
316 8,15625,
317 '0x80000000','0x0',31,
318 1,1,
319 '0xfa000000','0x0',22,
320 1000,1,
321 '0x83126e98','0x1ff7ced9168',41,
322 1,1000,
323 '0xfa000000','0xfe000000',32,
324 125,128,
325 '0x83126e98','0x7ef9db22',31,
326 128,125,
327 '0xf4240000','0x3c0000',22,
328 15625,16,
329 '0x8637bd06','0x1fff79c842f',41,
330 16,15625,
331 '0xd5555556','0xd5555555',32,
332 5,6,
333 '0x9999999a','0x66666666',31,
334 6,5,
335 '0xd0555556','0x2aaaaa',22,
336 2500,3,
337 '0x9d495183','0x1ffcb923a29',41,
338 3,2500,
339 ]
340 );
341 $has_bigint
342 eval
343 'use
344 qw(bgcd);
345 1;';
346 sub
347 bint($)
348 {
349 my($x)
350 @_;
351 return
352 Math::BigInt->new($x);
353 }
354 Constants
355 division
356 reciprocal
357 multiplication.
358 (bits,
359 numerator,
360 denominator)
361 fmul($$$)
362 my
363 ($b,$n,$d)
364 $n
365 bint($n);
366 $d
367 bint($d);
368 scalar
369 (($n
370 <<
371 $b)+$d-bint(1))/$d;
372 fadj($$$)
373 my($b,$n,$d)
374 $d/bgcd($n,
375 $d);
376 (($d-bint(1))
377 $b)/$d;
378 fmuls($$$)
379 my($s,$m);
380 my($thres)
381 bint(1)
382 ($b-1);
383 ($s
384 0;
385 1;
386 $s++)
387 $m
388 fmul($s,$n,$d);
389 $s
390 ($m
391 >=
392 $thres);
393 Generate
394 hex
395 value
396 result
397 fits
398 bits;
399 skip.
400 bignum_hex($)
401 $x->as_hex();
402 (length($s)
403 18)
404 ?
405 undef
406 :
407 $s;
408 Provides
409 mul,
410 adj,
411 shr
412 factors
413 specific
414 (bit,
415 hz)
416 combination
417 muladj($$$)
418 my($b,
419 $t,
420 $hz)
421 fmuls($b,
422 $hz);
423 fmul($s,
424 $a
425 fadj($s,
426 (bignum_hex($m),
427 bignum_hex($a),
428 $s);
429 denominator
430 numden($$)
431 my($n,
432 $d)
433 $g
434 bgcd($n,
435 ($n/$g,
436 $d/$g);
437 (time,
438 combo
439 conversions($$)
440 ($t,
441 @val
442 ();
443 HZ_TO_xx
444 push(@val,
445 muladj(32,
446 $hz));
447 numden($t,
448 xx_TO_HZ
449 $hz,
450 $t));
451 numden($hz,
452 @val;
453 compute_values($)
454 my($hz)
455 $s,
456 $m,
457 $a,
458 $g;
459 (!$has_bigint)
460 die
461 "$0:
462 ==
463 $hz
464 canned
465 ".
466 "Math::BigInt
467 available\n";
468 MSEC
469 conversions
470 conversions(1000,
471 USEC
472 conversions(1000000,
473 outputval($$)
474 my($name,
475 $val)
476 $csuf;
477 (defined($val))
478 ($name
479 !~
480 /SHR/)
481 $val
482 "U64_C($val)";
483 printf
484 "#define
485 %-23s
486 %s\n",
487 $name.$csuf,
488 $val.$csuf;
489 output($@)
490 my($hz,
491 @val)
492 $pfx,
493 $bit,
494 $suf,
495 $a;
496 print
497 "/*
498 Automatically
499 generated
500 kernel/timeconst.pl
501 */\n";
502 Conversion
503 constants
504 "\n";
505 "#ifndef
506 KERNEL_TIMECONST_H\n";
507 "#include
508 <linux/param.h>\n";
509 <linux/types.h>\n";
510 "#if
511 !=
512 $hz\n";
513 "#error
514 \"kernel/timeconst.h
515 has
516 wrong
517 value!\"\n";
518 "#endif\n";
519 foreach
520 $pfx
521 ('HZ_TO_MSEC','MSEC_TO_HZ',
522 'HZ_TO_USEC','USEC_TO_HZ')
523 $bit
524 (32)
525 $suf
526 ('MUL',
527 'ADJ',
528 'SHR')
529 outputval("${pfx}_$suf$bit",
530 shift(@val));
531 ('NUM',
532 'DEN')
533 outputval("${pfx}_$suf",
534 "#endif
535 /*
536 KERNEL_TIMECONST_H
537 Pretty-print
538 Perl
539 perlvals(@)
540 $v;
541 @l
542 $v
543 (@_)
544 (!defined($v))
545 push(@l,
546 'undef');
547 elsif
548 ($v
549 =~
550 /^0x/)
551 "\'".$v."\'");
552 else
553 $v.'');
554 join(',',
555 @l);
556 ($hz)
557 @ARGV;
558 Use
559 generate
560 structure
561 ($hz
562 eq
563 '--can')
564 shift(@ARGV);
565 @hzlist
566 sort
567 {$a
568 <=>
569 $b}
570 (@ARGV);
571 "#
572 Math::BigInt\n";
573 by:\n";
574 ",
575 join('
576 ',
577 @hzlist),
578 "\%canned_values
579 (\n";
580 $pf
581 "\t";
582 (@hzlist)
583 @values
584 compute_values($hz);
585 "$pf$hz
586 [\n";
587 while
588 (scalar(@values))
589 $bit;
590 shift(@values);
591 "\t\t",
592 perlvals($m,$a,$s),
593 ",\n";
594 perlvals($n,$d),
595 "\t]";
596 ';
597 "\n);\n";
598 +=
599 Force
600 number
601 <
602 1)
603 "Usage:
604 $0
605 HZ\n";
606 @{$canned_values{$hz}};
607 (!defined(@val))
608 output($hz,
609 @val);
610 exit
611 Makefile
612 linux
613 kernel.
614 obj-y
615 sched.o
616 fork.o
617 exec_domain.o
618 panic.o
619 printk.o
620 \
621 cpu.o
622 exit.o
623 itimer.o
624 time.o
625 softirq.o
626 resource.o
627 sysctl.o
628 sysctl_binary.o
629 capability.o
630 ptrace.o
631 timer.o
632 user.o
633 signal.o
634 sys.o
635 kmod.o
636 workqueue.o
637 pid.o
638 rcupdate.o
639 extable.o
640 params.o
641 posix-timers.o
642 kthread.o
643 wait.o
644 kfifo.o
645 sys_ni.o
646 posix-cpu-timers.o
647 mutex.o
648 hrtimer.o
649 rwsem.o
650 nsproxy.o
651 srcu.o
652 semaphore.o
653 notifier.o
654 ksysfs.o
655 sched_clock.o
656 cred.o
657 async.o
658 range.o
659 groups.o
660 ifdef
661 CONFIG_FUNCTION_TRACER
662 Do
663 trace
664 debug
665 files
666 internal
667 ftrace
668 CFLAGS_REMOVE_lockdep.o
669 -pg
670 CFLAGS_REMOVE_lockdep_proc.o
671 CFLAGS_REMOVE_mutex-debug.o
672 CFLAGS_REMOVE_rtmutex-debug.o
673 CFLAGS_REMOVE_cgroup-debug.o
674 CFLAGS_REMOVE_sched_clock.o
675 CFLAGS_REMOVE_irq_work.o
676 endif
677 obj-$(CONFIG_FREEZER)
678 freezer.o
679 obj-$(CONFIG_PROFILING)
680 profile.o
681 obj-$(CONFIG_SYSCTL_SYSCALL_CHECK)
682 sysctl_check.o
683 obj-$(CONFIG_STACKTRACE)
684 stacktrace.o
685 time/
686 obj-$(CONFIG_DEBUG_MUTEXES)
687 mutex-debug.o
688 obj-$(CONFIG_LOCKDEP)
689 lockdep.o
690 ifeq
691 ($(CONFIG_PROC_FS),y)
692 lockdep_proc.o
693 obj-$(CONFIG_FUTEX)
694 futex.o
695 ($(CONFIG_COMPAT),y)
696 futex_compat.o
697 obj-$(CONFIG_RT_MUTEXES)
698 rtmutex.o
699 obj-$(CONFIG_DEBUG_RT_MUTEXES)
700 rtmutex-debug.o
701 obj-$(CONFIG_RT_MUTEX_TESTER)
702 rtmutex-tester.o
703 obj-$(CONFIG_GENERIC_ISA_DMA)
704 dma.o
705 obj-$(CONFIG_SMP)
706 smp.o
707 ifneq
708 ($(CONFIG_SMP),y)
709 up.o
710 spinlock.o
711 obj-$(CONFIG_DEBUG_SPINLOCK)
712 obj-$(CONFIG_PROVE_LOCKING)
713 obj-$(CONFIG_UID16)
714 uid16.o
715 obj-$(CONFIG_MODULES)
716 module.o
717 obj-$(CONFIG_KALLSYMS)
718 kallsyms.o
719 obj-$(CONFIG_PM)
720 power/
721 obj-$(CONFIG_BSD_PROCESS_ACCT)
722 acct.o
723 obj-$(CONFIG_KEXEC)
724 kexec.o
725 obj-$(CONFIG_BACKTRACE_SELF_TEST)
726 backtracetest.o
727 obj-$(CONFIG_COMPAT)
728 compat.o
729 obj-$(CONFIG_CGROUPS)
730 cgroup.o
731 obj-$(CONFIG_CGROUP_FREEZER)
732 cgroup_freezer.o
733 obj-$(CONFIG_CPUSETS)
734 cpuset.o
735 obj-$(CONFIG_UTS_NS)
736 utsname.o
737 obj-$(CONFIG_USER_NS)
738 user_namespace.o
739 obj-$(CONFIG_PID_NS)
740 pid_namespace.o
741 obj-$(CONFIG_IKCONFIG)
742 configs.o
743 obj-$(CONFIG_RESOURCE_COUNTERS)
744 res_counter.o
745 stop_machine.o
746 obj-$(CONFIG_KPROBES_SANITY_TEST)
747 test_kprobes.o
748 obj-$(CONFIG_AUDIT)
749 audit.o
750 auditfilter.o
751 obj-$(CONFIG_AUDITSYSCALL)
752 auditsc.o
753 obj-$(CONFIG_AUDIT_WATCH)
754 audit_watch.o
755 obj-$(CONFIG_AUDIT_TREE)
756 audit_tree.o
757 obj-$(CONFIG_GCOV_KERNEL)
758 gcov/
759 obj-$(CONFIG_KPROBES)
760 kprobes.o
761 obj-$(CONFIG_KGDB)
762 debug/
763 obj-$(CONFIG_DETECT_HUNG_TASK)
764 hung_task.o
765 obj-$(CONFIG_LOCKUP_DETECTOR)
766 watchdog.o
767 obj-$(CONFIG_GENERIC_HARDIRQS)
768 irq/
769 obj-$(CONFIG_SECCOMP)
770 seccomp.o
771 obj-$(CONFIG_RCU_TORTURE_TEST)
772 rcutorture.o
773 obj-$(CONFIG_TREE_RCU)
774 rcutree.o
775 obj-$(CONFIG_TREE_PREEMPT_RCU)
776 obj-$(CONFIG_TREE_RCU_TRACE)
777 rcutree_trace.o
778 obj-$(CONFIG_TINY_RCU)
779 rcutiny.o
780 obj-$(CONFIG_TINY_PREEMPT_RCU)
781 obj-$(CONFIG_RELAY)
782 relay.o
783 obj-$(CONFIG_SYSCTL)
784 utsname_sysctl.o
785 obj-$(CONFIG_TASK_DELAY_ACCT)
786 delayacct.o
787 obj-$(CONFIG_TASKSTATS)
788 taskstats.o
789 tsacct.o
790 obj-$(CONFIG_TRACEPOINTS)
791 tracepoint.o
792 obj-$(CONFIG_LATENCYTOP)
793 latencytop.o
794 obj-$(CONFIG_BINFMT_ELF)
795 elfcore.o
796 obj-$(CONFIG_COMPAT_BINFMT_ELF)
797 obj-$(CONFIG_BINFMT_ELF_FDPIC)
798 obj-$(CONFIG_FUNCTION_TRACER)
799 trace/
800 obj-$(CONFIG_TRACING)
801 obj-$(CONFIG_X86_DS)
802 obj-$(CONFIG_RING_BUFFER)
803 sched_cpupri.o
804 obj-$(CONFIG_IRQ_WORK)
805 irq_work.o
806 obj-$(CONFIG_CPU_PM)
807 cpu_pm.o
808 obj-$(CONFIG_PERF_EVENTS)
809 events/
810 obj-$(CONFIG_USER_RETURN_NOTIFIER)
811 user-return-notifier.o
812 obj-$(CONFIG_PADATA)
813 padata.o
814 obj-$(CONFIG_CRASH_DUMP)
815 crash_dump.o
816 obj-$(CONFIG_JUMP_LABEL)
817 jump_label.o
818 ($(CONFIG_SCHED_OMIT_FRAME_POINTER),y)
819 According
820 Alan
821 Modra
822 <alan@linuxcare.com.au>,
823 -fno-omit-frame-pointer
824 needed
825 x86
826 only.
827 Why
828 used
829 enabled
830 architectures
831 beyond
832 me.
833 I
834 suspect
835 platforms
836 don't
837 need
838 this,
839 until
840 we
841 know
842 that
843 sure
844 turn
845 off
846 IA-64
847 Andreas
848 Schwab
849 says
850 it's
851 also
852 on
853 m68k
854 get
855 correct
856 wait-channel
857 (WCHAN
858 ps).
859 --davidm
860 CFLAGS_sched.o
861 :=
862 $(PROFILING)
863 $(obj)/configs.o:
864 $(obj)/config_data.h
865 config_data.h
866 contains
867 same
868 information
869 as
870 ikconfig.h
871 gzipped.
872 Info
873 from
874 config_data
875 can
876 extracted
877 /proc/config*
878 targets
879 config_data.gz
880 $(obj)/config_data.gz:
881 $(KCONFIG_CONFIG)
882 FORCE
883 $(call
884 if_changed,gzip)
885 filechk_ikconfiggz
886 (echo
887 "static
888 const
889 char
890 kernel_config_data[]
891 __used
892 MAGIC_START";
893 cat
894 $<
895 |
896 scripts/bin2c;
897 echo
898 "MAGIC_END;")
899 $(obj)/config_data.h:
900 $(obj)/config_data.gz
901 filechk,ikconfiggz)
902 $(obj)/time.o:
903 $(obj)/timeconst.h
904 quiet_cmd_timeconst
905 TIMEC
906 $@
907 cmd_timeconst
908 $(PERL)
909 $(CONFIG_HZ)
910 $(obj)/timeconst.h:
911 $(src)/timeconst.pl
912 if_changed,timeconst)
913 The
914 ARCH_INLINE
915 foo
916 necessary
917 because
918 ignores
919 "depends
920 on"
921 ARCH_INLINE_SPIN_TRYLOCK
922 ARCH_INLINE_SPIN_TRYLOCK_BH
923 ARCH_INLINE_SPIN_LOCK
924 ARCH_INLINE_SPIN_LOCK_BH
925 ARCH_INLINE_SPIN_LOCK_IRQ
926 ARCH_INLINE_SPIN_LOCK_IRQSAVE
927 ARCH_INLINE_SPIN_UNLOCK
928 ARCH_INLINE_SPIN_UNLOCK_BH
929 ARCH_INLINE_SPIN_UNLOCK_IRQ
930 ARCH_INLINE_SPIN_UNLOCK_IRQRESTORE
931 ARCH_INLINE_READ_TRYLOCK
932 ARCH_INLINE_READ_LOCK
933 ARCH_INLINE_READ_LOCK_BH
934 ARCH_INLINE_READ_LOCK_IRQ
935 ARCH_INLINE_READ_LOCK_IRQSAVE
936 ARCH_INLINE_READ_UNLOCK
937 ARCH_INLINE_READ_UNLOCK_BH
938 ARCH_INLINE_READ_UNLOCK_IRQ
939 ARCH_INLINE_READ_UNLOCK_IRQRESTORE
940 ARCH_INLINE_WRITE_TRYLOCK
941 ARCH_INLINE_WRITE_LOCK
942 ARCH_INLINE_WRITE_LOCK_BH
943 ARCH_INLINE_WRITE_LOCK_IRQ
944 ARCH_INLINE_WRITE_LOCK_IRQSAVE
945 ARCH_INLINE_WRITE_UNLOCK
946 ARCH_INLINE_WRITE_UNLOCK_BH
947 ARCH_INLINE_WRITE_UNLOCK_IRQ
948 ARCH_INLINE_WRITE_UNLOCK_IRQRESTORE
949 lock_*
950 functions
951 inlined
952 when:
953 DEBUG_SPINLOCK=n
954 GENERIC_LOCKBREAK=n
955 ARCH_INLINE_*LOCK=y
956 trylock_*
957 unlock
958 unlock_irq
959 PREEMPT=n
960 unlock_bh
961 unlock_irqrestore
962 INLINE_SPIN_TRYLOCK
963 def_bool
964 !DEBUG_SPINLOCK
965 &&
966 INLINE_SPIN_TRYLOCK_BH
967 INLINE_SPIN_LOCK
968 !GENERIC_LOCKBREAK
969 INLINE_SPIN_LOCK_BH
970 INLINE_SPIN_LOCK_IRQ
971 INLINE_SPIN_LOCK_IRQSAVE
972 INLINE_SPIN_UNLOCK
973 (!PREEMPT
974 ||
975 ARCH_INLINE_SPIN_UNLOCK)
976 INLINE_SPIN_UNLOCK_BH
977 INLINE_SPIN_UNLOCK_IRQ
978 ARCH_INLINE_SPIN_UNLOCK_BH)
979 INLINE_SPIN_UNLOCK_IRQRESTORE
980 INLINE_READ_TRYLOCK
981 INLINE_READ_LOCK
982 INLINE_READ_LOCK_BH
983 INLINE_READ_LOCK_IRQ
984 INLINE_READ_LOCK_IRQSAVE
985 INLINE_READ_UNLOCK
986 ARCH_INLINE_READ_UNLOCK)
987 INLINE_READ_UNLOCK_BH
988 INLINE_READ_UNLOCK_IRQ
989 ARCH_INLINE_READ_UNLOCK_BH)
990 INLINE_READ_UNLOCK_IRQRESTORE
991 INLINE_WRITE_TRYLOCK
992 INLINE_WRITE_LOCK
993 INLINE_WRITE_LOCK_BH
994 INLINE_WRITE_LOCK_IRQ
995 INLINE_WRITE_LOCK_IRQSAVE
996 INLINE_WRITE_UNLOCK
997 ARCH_INLINE_WRITE_UNLOCK)
998 INLINE_WRITE_UNLOCK_BH
999 INLINE_WRITE_UNLOCK_IRQ
1000 ARCH_INLINE_WRITE_UNLOCK_BH)
1001 INLINE_WRITE_UNLOCK_IRQRESTORE
1002 MUTEX_SPIN_ON_OWNER
1003 SMP
1004 !DEBUG_MUTEXES
1005 FREEZER
1006 PM_SLEEP
1007 CGROUP_FREEZER
1008 Timer
1009 Interrupt
1010 Frequency
1011 Configuration
1012 "Timer
1013 frequency"
1014 HZ_250
1015 Allows
1016 configuration
1017 timer
1018 frequency.
1019 customary
1020 interrupt
1021 Hz
1022 may
1023 beneficial
1024 servers
1025 NUMA
1026 do
1027 fast
1028 response
1029 user
1030 interaction
1031 experience
1032 bus
1033 contention
1034 cacheline
1035 bounces
1036 interrupts.
1037 Note
1038 occurs
1039 each
1040 processor
1041 an
1042 environment
1043 leading
1044 NR_CPUS
1045 *
1046 interrupts
1047 per
1048 second.
1049 HZ_100
1050 "100
1051 HZ"
1052 typical
1053 servers,
1054 lots
1055 processors
1056 show
1057 reduced
1058 performance
1059 too
1060 many
1061 occurring.
1062 "250
1063 compromise
1064 showing
1065 responsiveness
1066 systems.
1067 If
1068 going
1069 using
1070 NTSC
1071 video
1072 multimedia,
1073 300Hz
1074 instead.
1075 HZ_300
1076 "300
1077 exactly
1078 dividing
1079 both
1080 PAL
1081 frame
1082 rates
1083 multimedia
1084 work.
1085 HZ_1000
1086 "1000
1087 preferred
1088 other
1089 requiring
1090 responses
1091 events.
1092 int
1093 SCHED_HRTICK
1094 HIGH_RES_TIMERS
1095 (!SMP
1096 USE_GENERIC_SMP_HELPERS)
1097 ccflags-y
1098 -DSRCTREE='"$(srctree)"'
1099 -DOBJTREE='"$(objtree)"'
1100 base.o
1101 fs.o
1102 gcc_3_4.o
1103 menu
1104 "GCOV-based
1105 profiling"
1106 GCOV_KERNEL
1107 "Enable
1108 gcov-based
1109 depends
1110 DEBUG_FS
1111 CONSTRUCTORS
1112 !UML
1113 n
1114 ---help---
1115 enables
1116 profiling
1117 (e.g.
1118 coverage
1119 measurements).
1120 unsure,
1121 say
1122 N.
1123 Additionally
1124 specify
1125 CONFIG_GCOV_PROFILE_ALL=y
1126 data
1127 entire
1128 To
1129 enable
1130 directories,
1131 add
1132 line
1133 similar
1134 following
1135 respective
1136 Makefile:
1137 For
1138 single
1139 main.o):
1140 GCOV_PROFILE_main.o
1141 y
1142 one
1143 directory:
1144 GCOV_PROFILE
1145 exclude
1146 being
1147 profiled
1148 CONFIG_GCOV_PROFILE_ALL
1149 specified,
1150 use:
1151 and:
1152 debugfs
1153 filesystem
1154 mounted
1155 access
1156 data.
1157 GCOV_PROFILE_ALL
1158 "Profile
1159 Kernel"
1160 SUPERH
1161 S390
1162 X86
1163 (PPC
1164 EXPERIMENTAL)
1165 MICROBLAZE
1166 options
1167 activates
1168 compiled
1169 flags
1170 significantly
1171 larger
1172 slower.
1173 Also
1174 which
1175 linked
1176 image
1177 prevent
1178 linker
1179 errors.
1180 endmenu
1181 instrument
1182 tracer
1183 itself:
1184 ORIG_CFLAGS
1185 $(KBUILD_CFLAGS)
1186 KBUILD_CFLAGS
1187 $(subst
1188 -pg,,$(ORIG_CFLAGS))
1189 selftest
1190 needs
1191 instrumentation
1192 CFLAGS_trace_selftest_dynamic.o
1193 trace_selftest_dynamic.o
1194 unlikely
1195 tracing
1196 enabled,
1197 these
1198 CONFIG_TRACING_BRANCHES
1199 -DDISABLE_BRANCH_PROFILING
1200 CFLAGS_trace_events_filter.o
1201 -I$(src)
1202 Make
1203 clocks
1204 generally:
1205 infrastructure
1206 relied
1207 ptrace
1208 example:
1209 trace_clock.o
1210 libftrace.o
1211 ring_buffer.o
1212 obj-$(CONFIG_RING_BUFFER_BENCHMARK)
1213 ring_buffer_benchmark.o
1214 trace.o
1215 trace_output.o
1216 trace_stat.o
1217 trace_printk.o
1218 obj-$(CONFIG_CONTEXT_SWITCH_TRACER)
1219 trace_sched_switch.o
1220 trace_functions.o
1221 obj-$(CONFIG_IRQSOFF_TRACER)
1222 trace_irqsoff.o
1223 obj-$(CONFIG_PREEMPT_TRACER)
1224 obj-$(CONFIG_SCHED_TRACER)
1225 trace_sched_wakeup.o
1226 obj-$(CONFIG_NOP_TRACER)
1227 trace_nop.o
1228 obj-$(CONFIG_STACK_TRACER)
1229 trace_stack.o
1230 obj-$(CONFIG_MMIOTRACE)
1231 trace_mmiotrace.o
1232 obj-$(CONFIG_FUNCTION_GRAPH_TRACER)
1233 trace_functions_graph.o
1234 obj-$(CONFIG_TRACE_BRANCH_PROFILING)
1235 trace_branch.o
1236 obj-$(CONFIG_WORKQUEUE_TRACER)
1237 trace_workqueue.o
1238 obj-$(CONFIG_BLK_DEV_IO_TRACE)
1239 blktrace.o
1240 ($(CONFIG_BLOCK),y)
1241 obj-$(CONFIG_EVENT_TRACING)
1242 trace_events.o
1243 trace_export.o
1244 obj-$(CONFIG_FTRACE_SYSCALLS)
1245 trace_syscalls.o
1246 ($(CONFIG_PERF_EVENTS),y)
1247 trace_event_perf.o
1248 trace_events_filter.o
1249 obj-$(CONFIG_KPROBE_EVENT)
1250 trace_kprobe.o
1251 power-traces.o
1252 ($(CONFIG_PM_RUNTIME),y)
1253 rpm-traces.o
1254 ($(CONFIG_TRACING),y)
1255 obj-$(CONFIG_KGDB_KDB)
1256 trace_kdb.o
1257 libftrace-y
1258 ftrace.o
1259 Architectures
1260 offer
1261 FUNCTION_TRACER
1262 implementation
1263 should
1264 HAVE_FUNCTION_TRACER:
1265 USER_STACKTRACE_SUPPORT
1266 NOP_TRACER
1267 HAVE_FTRACE_NMI_ENTER
1268 See
1269 Documentation/trace/ftrace-design.txt
1270 HAVE_FUNCTION_TRACER
1271 HAVE_FUNCTION_GRAPH_TRACER
1272 HAVE_FUNCTION_GRAPH_FP_TEST
1273 HAVE_FUNCTION_TRACE_MCOUNT_TEST
1274 HAVE_DYNAMIC_FTRACE
1275 HAVE_FTRACE_MCOUNT_RECORD
1276 HAVE_SYSCALL_TRACEPOINTS
1277 HAVE_C_RECORDMCOUNT
1278 C
1279 recordmcount
1280 available?
1281 TRACER_MAX_TRACE
1282 RING_BUFFER
1283 FTRACE_NMI_ENTER
1284 EVENT_TRACING
1285 CONTEXT_SWITCH_TRACER
1286 EVENT_POWER_TRACING_DEPRECATED
1287 "Deprecated
1288 event
1289 API,
1290 removed"
1291 old
1292 types:
1293 C-state/idle
1294 accounting
1295 events:
1296 power:power_start
1297 power:power_end
1298 cpufreq
1299 event:
1300 power:power_frequency
1301 userspace
1302 compatibility
1303 vanish
1304 after
1305 5
1306 iterations,
1307 namely
1308 3.1.
1309 RING_BUFFER_ALLOW_SWAP
1310 Allow
1311 use
1312 ring_buffer_swap_cpu.
1313 Adds
1314 very
1315 enabled.
1316 GENERIC_TRACER.
1317 those
1318 tracers
1319 (context
1320 switch
1321 tracer)
1322 they
1323 TRACING.
1324 appear
1325 selected.
1326 But
1327 something
1328 selects
1329 it.
1330 We
1331 two
1332 GENERIC_TRACER
1333 TRACING
1334 avoid
1335 circular
1336 dependencies
1337 accomplish
1338 hiding
1339 automatic
1340 options.
1341 STACKTRACE
1342 STACKTRACE_SUPPORT
1343 TRACEPOINTS
1344 BINARY_PRINTF
1345 Minimum
1346 architecture
1347 meet
1348 us
1349 able
1350 generic
1351 facilities:
1352 TRACING_SUPPORT
1353 PPC32
1354 irqflags
1355 support,
1356 anyway,
1357 were
1358 tested
1359 build
1360 exceptions
1361 list
1362 aren't
1363 welcomed,
1364 better
1365 implement
1366 architecture.
1367 TRACE_IRQFLAGS_SUPPORT
1368 menuconfig
1369 FTRACE
1370 "Tracers"
1371 DEBUG_KERNEL
1372 Enable
1373 infrastructure.
1374 "Kernel
1375 Function
1376 Tracer"
1377 FRAME_POINTER
1378 !ARM_UNWIND
1379 !S390
1380 !MICROBLAZE
1381 KALLSYMS
1382 every
1383 function.
1384 done
1385 compiler
1386 feature
1387 insert
1388 small,
1389 5-byte
1390 No-Operation
1391 instruction
1392 beginning
1393 function,
1394 NOP
1395 sequence
1396 then
1397 dynamically
1398 patched
1399 into
1400 administrator.
1401 disabled
1402 (the
1403 bootup
1404 default),
1405 instructions
1406 small
1407 measurable
1408 micro-benchmarks.
1409 FUNCTION_GRAPH_TRACER
1410 Graph
1411 !X86_32
1412 !CC_OPTIMIZE_FOR_SIZE
1413 function
1414 its
1415 entry.
1416 Its
1417 first
1418 purpose
1419 duration
1420 draw
1421 graph
1422 thread
1423 some
1424 like
1425 value.
1426 setting
1427 current
1428 address
1429 task
1430 stack
1431 calls.
1432 IRQSOFF_TRACER
1433 "Interrupts-off
1434 Latency
1435 !ARCH_USES_GETTIMEOFFSET
1436 TRACE_IRQFLAGS
1437 measures
1438 time
1439 spent
1440 irqs-off
1441 sections,
1442 microsecond
1443 accuracy.
1444 measurement
1445 method
1446 search,
1447 (re-)started
1448 via:
1449 0
1450 /sys/kernel/debug/tracing/tracing_max_latency
1451 (Note
1452 size
1453 increase
1454 preempt-off
1455 timing
1456 together
1457 separately.)
1458 PREEMPT_TRACER
1459 "Preemption-off
1460 preemption-off
1461 SCHED_TRACER
1462 "Scheduling
1463 tracks
1464 highest
1465 scheduled
1466 in,
1467 starting
1468 point
1469 woken
1470 up.
1471 ENABLE_DEFAULT_TRACERS
1472 "Trace
1473 context
1474 switches
1475 events"
1476 !GENERIC_TRACER
1477 hooks
1478 various
1479 pick
1480 choose
1481 trace.
1482 includes
1483 sched_switch
1484 plugin.
1485 FTRACE_SYSCALLS
1486 syscalls"
1487 Basic
1488 catch
1489 syscall
1490 entry
1491 TRACE_BRANCH_PROFILING
1492 "Branch
1493 Profiling"
1494 BRANCH_PROFILE_NONE
1495 branch
1496 software
1497 profiler.
1498 conditionals
1499 test
1500 path
1501 takes.
1502 likely/unlikely
1503 profiler
1504 only
1505 looks
1506 conditions
1507 annotated
1508 likely
1509 macro.
1510 "all
1511 branch"
1512 profile
1513 if-statement
1514 Either
1515 above
1516 profilers
1517 adds
1518 bit
1519 profiling".
1520 No
1521 profiling.
1522 Branch
1523 overhead.
1524 Only
1525 analyse
1526 branching
1527 behavior.
1528 Otherwise
1529 keep
1530 disabled.
1531 PROFILE_ANNOTATED_BRANCHES
1532 profiler"
1533 profiles
1534 macros
1535 display
1536 results
1537 in:
1538 /sys/kernel/debug/tracing/trace_stat/branch_annotated
1539 Note:
1540 significant
1541 overhead;
1542 system's
1543 macros.
1544 PROFILE_ALL_BRANCHES
1545 conditionals"
1546 conditions.
1547 Every
1548 ()
1549 taken
1550 recorded
1551 whether
1552 hit
1553 miss.
1554 displayed
1555 /sys/kernel/debug/tracing/trace_stat/branch_all
1556 configuration,
1557 impose
1558 great
1559 analyzed
1560 much
1561 detail.
1562 TRACING_BRANCHES
1563 Selected
1564 prevents
1565 themselves
1566 profiled.
1567 Profiling
1568 happen
1569 likelys
1570 unlikelys
1571 traced.
1572 BRANCH_TRACER
1573 instances"
1574 traces
1575 condition
1576 calls
1577 difference
1578 between
1579 histogram
1580 callers,
1581 actually
1582 places
1583 calling
1584 running
1585 buffer
1586 see
1587 where
1588 happened,
1589 well
1590 their
1591 results.
1592 Say
1593 N
1594 unsure.
1595 STACK_TRACER
1596 max
1597 stack"
1598 special
1599 records
1600 footprint
1601 displays
1602 /sys/kernel/debug/tracing/stack_trace.
1603 works
1604 hooking
1605 executes,
1606 keeping
1607 depth
1608 stack-trace
1609 saved.
1610 configured
1611 DYNAMIC_FTRACE
1612 bootup,
1613 pass
1614 'stacktrace'
1615 command
1616 line.
1617 via
1618 sysctl
1619 kernel.stack_tracer_enabled
1620 BLK_DEV_IO_TRACE
1621 "Support
1622 block
1623 IO
1624 actions"
1625 SYSFS
1626 BLOCK
1627 RELAY
1628 Y
1629 here
1630 layer
1631 actions
1632 given
1633 queue.
1634 Tracing
1635 traffic
1636 happening
1637 device
1638 (and
1639 support
1640 tools
1641 needed),
1642 fetch
1643 blktrace
1644 from:
1645 git://git.kernel.dk/blktrace.git
1646 possible
1647 interface,
1648 e.g.:
1649 1
1650 /sys/block/sda/sda1/trace/enable
1651 blk
1652 /sys/kernel/debug/tracing/current_tracer
1653 /sys/kernel/debug/tracing/trace_pipe
1654 KPROBE_EVENT
1655 KPROBES
1656 HAVE_REGS_AND_STACK_ACCESS_API
1657 kprobes-based
1658 dynamic
1659 (similar
1660 tracepoints)
1661 fly
1662 interface.
1663 Documentation/trace/kprobetrace.txt
1664 details.
1665 Those
1666 inserted
1667 wherever
1668 kprobes
1669 probe,
1670 record
1671 register
1672 memory
1673 values.
1674 required
1675 perf-probe
1676 subcommand
1677 perf
1678 tools.
1679 tools,
1680 strongly
1681 recommended.
1682 "enable/disable
1683 tracepoints
1684 dynamically"
1685 modify
1686 (will
1687 patch
1688 them
1689 out
1690 binary
1691 replace
1692 No-Op
1693 instruction)
1694 called.
1695 A
1696 table
1697 created
1698 again.
1699 way
1700 larger,
1701 native
1702 long
1703 active.
1704 changes
1705 wakes
1706 up
1707 once
1708 second
1709 checks
1710 made.
1711 so,
1712 runs
1713 stop_machine
1714 (stops
1715 CPUS)
1716 modifies
1717 jump
1718 over
1719 ftrace.
1720 FUNCTION_PROFILER
1721 called
1722 function_profile_enabled
1723 defaults
1724 zero.
1725 When
1726 echoed
1727 begins,
1728 zero
1729 entered,
1730 stops.
1731 "functions"
1732 trace_stats
1733 directory;
1734 shows
1735 counters.
1736 doubt,
1737 FTRACE_MCOUNT_RECORD
1738 FTRACE_SELFTEST
1739 FTRACE_STARTUP_TEST
1740 "Perform
1741 startup
1742 ftrace"
1743 performs
1744 series
1745 tests
1746 On
1747 verify
1748 functioning
1749 properly.
1750 EVENT_TRACE_TEST_SYSCALLS
1751 "Run
1752 testing
1753 event.
1754 disables
1755 loads
1756 boot
1757 since
1758 defined.
1759 TBD
1760 syscalls
1761 MMIOTRACE
1762 "Memory
1763 mapped
1764 tracing"
1765 HAVE_MMIOTRACE_SUPPORT
1766 PCI
1767 Mmiotrace
1768 Memory
1769 Mapped
1770 I/O
1771 meant
1772 debugging
1773 reverse
1774 engineering.
1775 ioremap
1776 page
1777 faults.
1778 run-time.
1779 Documentation/trace/mmiotrace.txt.
1780 helping
1781 develop
1782 drivers,
1783 MMIOTRACE_TEST
1784 tristate
1785 "Test
1786 module
1787 mmiotrace"
1788 m
1789 dumb
1790 mmiotrace.
1791 dangerous
1792 write
1793 garbage
1794 address.
1795 However,
1796 safe
1797 e.g.
1798 unused
1799 portion
1800 VRAM.
1801 N,
1802 unless
1803 absolutely
1804 what
1805 doing.
1806 RING_BUFFER_BENCHMARK
1807 "Ring
1808 benchmark
1809 stress
1810 tester"
1811 creates
1812 ring
1813 own
1814 such
1815 interfere
1816 users
1817 (such
1818 ftrace).
1819 producer
1820 consumer
1821 10
1822 seconds
1823 sleep
1824 seconds.
1825 Each
1826 interval
1827 give
1828 rough
1829 estimate
1830 how
1831 iteration
1832 took.
1833 does
1834 disable
1835 raise
1836 priority,
1837 so
1838 affected
1839 processes
1840 running.
1841 debugger
1842 debug_core.o
1843 gdbstub.o
1844 kdb/
1845 subject
1846 License.
1847 "COPYING"
1848 main
1849 directory
1850 archive
1851 (c)
1852 1999-2004
1853 Silicon
1854 Graphics,
1855 Reserved.
1856 2009
1857 Wind
1858 River
1859 Systems,
1860 CCVERSION
1861 $(shell
1862 $(CC)
1863 -v
1864 2>&1
1865 sed
1866 -ne
1867 '$$p')
1868 kdb_io.o
1869 kdb_main.o
1870 kdb_support.o
1871 kdb_bt.o
1872 gen-kdb_cmds.o
1873 kdb_bp.o
1874 kdb_debugger.o
1875 obj-$(CONFIG_KDB_KEYBOARD)
1876 kdb_keyboard.o
1877 clean-files
1878 gen-kdb_cmds.c
1879 quiet_cmd_gen-kdb
1880 GENKDB
1881 cmd_gen-kdb
1882 $(AWK)
1883 'BEGIN
1884 {print
1885 "\#include
1886 <linux/stddef.h>";
1887 <linux/init.h>"}
1888 /^\#/{next}
1889 /^[
1890 \t]*$$/{next}
1891 {gsub(/"/,
1892 "\\\"",
1893 $$0);
1894 __initdata
1895 kdb_cmd"
1896 cmds++
1897 "[]
1898 \""
1899 $$0
1900 "\\n\";"}
1901 END
1902 "extern
1903 *kdb_cmds[];
1904 *kdb_cmds[]
1905 {";
1906 (i
1907 i
1908 cmds;
1909 ++i)
1910 "
1911 ","};
1912 print("
1913 NULL\n};");}'
1914 $(filter-out
1915 %/Makefile,$^)
1916 $@#
1917 $(obj)/gen-kdb_cmds.c:
1918 $(src)/kdb_cmds
1919 $(src)/Makefile
1920 cmd,gen-kdb)
1921 CFLAGS_REMOVE_core.o
1922 core.o
1923 obj-$(CONFIG_HAVE_HW_BREAKPOINT)
1924 hw_breakpoint.o
1925 ccflags-$(CONFIG_PM_DEBUG)
1926 -DDEBUG
1927 main.o
1928 qos.o
1929 obj-$(CONFIG_VT_CONSOLE_SLEEP)
1930 console.o
1931 process.o
1932 obj-$(CONFIG_SUSPEND)
1933 suspend.o
1934 obj-$(CONFIG_PM_TEST_SUSPEND)
1935 suspend_test.o
1936 obj-$(CONFIG_HIBERNATION)
1937 hibernate.o
1938 snapshot.o
1939 swap.o
1940 block_io.o
1941 obj-$(CONFIG_MAGIC_SYSRQ)
1942 poweroff.o
1943 SUSPEND
1944 "Suspend
1945 RAM
1946 standby"
1947 ARCH_SUSPEND_POSSIBLE
1948 enter
1949 states
1950 powered
1951 thus
1952 contents
1953 preserved,
1954 suspend-to-RAM
1955 state
1956 ACPI
1957 S3
1958 state).
1959 SUSPEND_FREEZER
1960 freezer
1961 suspend
1962 RAM/standby"
1963 ARCH_WANTS_FREEZER_CONTROL
1964 BROKEN
1965 suspend.
1966 done,
1967 tasks
1968 frozen
1969 RAM/standby.
1970 Turning
1971 OFF
1972 NOT
1973 recommended!
1974 Y.
1975 HIBERNATE_CALLBACKS
1976 HIBERNATION
1977 "Hibernation
1978 (aka
1979 'suspend
1980 disk')"
1981 SWAP
1982 ARCH_HIBERNATION_POSSIBLE
1983 LZO_COMPRESS
1984 LZO_DECOMPRESS
1985 CRC32
1986 disk
1987 (STD)
1988 functionality,
1989 usually
1990 "hibernation"
1991 interfaces.
1992 STD
1993 checkpoints
1994 powers
1995 off;
1996 restores
1997 checkpoint
1998 reboot.
1999 You
2000 machine
2001 'echo
2002 /sys/power/state'
2003 placing
2004 resume=/dev/swappartition
2005 bootloader's
2006 file.
2007 Alternatively,
2008 additional
2009 userland
2010 <http://suspend.sf.net>.
2011 In
2012 principle
2013 require
2014 APM,
2015 although
2016 example
2017 final
2018 steps
2019 available.
2020 One
2021 reasons
2022 firmware
2023 (STR)
2024 often
2025 work
2026 Linux.
2027 saved
2028 active
2029 swap.
2030 Upon
2031 next
2032 boot,
2033 'resume=/dev/swappartition'
2034 argument
2035 detect
2036 image,
2037 restore
2038 it,
2039 continue
2040 before.
2041 previous
2042 reloaded,
2043 'noresume'
2044 argument.
2045 Note,
2046 however,
2047 fsck
2048 filesystems
2049 mkswap
2050 against
2051 swap
2052 partition
2053 limited
2054 extent
2055 (for
2056 details
2057 <file:Documentation/power/swsusp-and-swap-files.txt>).
2058 Right
2059 now
2060 resuming
2061 resume
2062 meantime
2063 cannot
2064 partition(s)/file(s)
2065 involved
2066 suspending.
2067 case
2068 must
2069 before
2070 particular,
2071 MUST
2072 MOUNT
2073 journaled
2074 corrupted
2075 nasty
2076 way.
2077 take
2078 look
2079 <file:Documentation/power/swsusp.txt>.
2080 ARCH_SAVE_PAGE_KEYS
2081 PM_STD_PARTITION
2082 string
2083 "Default
2084 partition"
2085 ""
2086 suspend-
2087 to-disk
2088 suspended
2089 image.
2090 specified
2091 different
2092 almost
2093 user.
2094 valid
2095 least
2096 now)
2097 turned
2098 overridden
2099 specifying:
2100 resume=/dev/<other
2101 device>
2102 set
2103 specified.
2104 currently
2105 save
2106 to.
2107 simply
2108 device.
2109 PM_SLEEP_SMP
2110 HOTPLUG
2111 HOTPLUG_CPU
2112 PM_RUNTIME
2113 "Run-time
2114 PM
2115 core
2116 functionality"
2117 !IA64_HP_SIM
2118 functionality
2119 devices
2120 put
2121 energy-saving
2122 (low
2123 power)
2124 (or
2125 autosuspended)
2126 period
2127 inactivity
2128 hardware-generated
2129 wake-up
2130 driver's
2131 request.
2132 Hardware
2133 generally
2134 type
2135 drivers
2136 buses
2137 responsible
2138 actual
2139 handling
2140 autosuspend
2141 requests
2142 PM_DEBUG
2143 "Power
2144 Management
2145 Debug
2146 Support"
2147 Power
2148 helpful
2149 reporting
2150 bugs,
2151 support.
2152 PM_ADVANCED_DEBUG
2153 "Extra
2154 attributes
2155 sysfs
2156 low-level
2157 debugging/testing"
2158 Add
2159 extra
2160 fields
2161 objects
2162 space.
2163 developer
2164 interested
2165 debugging/testing
2166 Management,
2167 "no".
2168 PM_TEST_SUSPEND
2169 suspend/resume
2170 wakealarm
2171 during
2172 bootup"
2173 RTC_CLASS=y
2174 let
2175 make
2176 wake
2177 few
2178 RTC
2179 wakeup
2180 alarm.
2181 parameter
2182 "test_suspend=mem".
2183 probably
2184 driver
2185 statically
2186 linked,
2187 ensuring
2188 runs.
2189 CAN_PM_TRACE
2190 PM_TRACE
2191 last
2192 across
2193 saving
2194 things
2195 RTC,
2196 below.
2197 extern
2198 <linux/resume-trace.h>
2199 <asm/resume-trace.h>
2200 header
2201 TRACE_RESUME()
2202 presented
2203 architecture-
2204 dependent,
2205 late_initcall.
2206 PM_TRACE_RTC
2207 "Suspend/resume
2208 cheesy
2209 reboots,
2210 just
2211 hangs
2212 commonly,
2213 resume).
2214 attempt
2215 machine,
2216 reboot
2217 dmesg
2218 -s
2219 1000000
2220 grep
2221 'hash
2222 matches'
2223 CAUTION:
2224 cause
2225 machine's
2226 real-time
2227 clock
2228 invalid
2229 resume.
2230 APM_EMULATION
2231 "Advanced
2232 Emulation"
2233 SYS_SUPPORTS_APM_EMULATION
2234 APM
2235 BIOS
2236 specification
2237 several
2238 techniques.
2239 mostly
2240 useful
2241 battery
2242 laptops
2243 compliant
2244 BIOSes.
2245 here,
2246 reset
2247 RESUME
2248 operation,
2249 /proc/apm
2250 status
2251 information,
2252 user-space
2253 programs
2254 receive
2255 notification
2256 "events"
2257 change).
2258 order
2259 supporting
2260 software.
2261 location
2262 read
2263 <file:Documentation/power/apm-acpi.txt>
2264 Battery
2265 Powered
2266 mini-HOWTO,
2267 <http://www.tldp.org/docs.html#howto>.
2268 spin
2269 down
2270 drives
2271 (see
2272 hdparm(8)
2273 manpage
2274 ("man
2275 8
2276 hdparm")
2277 that),
2278 doesn't
2279 VESA-compliant
2280 "green"
2281 monitors.
2282 Generally,
2283 isn't
2284 random
2285 OOPSes
2286 reboots
2287 seem
2288 related
2289 anything,
2290 try
2291 disabling/enabling
2292 BIOS).
2293 ARCH_HAS_OPP
2294 PM_OPP
2295 "Operating
2296 Performance
2297 Point
2298 (OPP)
2299 Layer
2300 library"
2301 SOCs
2302 standard
2303 tuples
2304 consisting
2305 frequency
2306 voltage
2307 pairs
2308 domain.
2309 Operating
2310 OPP.
2311 definitions
2312 OPP
2313 varies
2314 silicon
2315 within
2316 family
2317 devices.
2318 organizes
2319 internally
2320 pointers
2321 representing
2322 individual
2323 domains
2324 provides
2325 SOC
2326 implementations
2327 ready
2328 framework
2329 manage
2330 OPPs.
2331 <file:Documentation/power/opp.txt>
2332 PM_CLK
2333 HAVE_CLK
2334 PM_GENERIC_DOMAINS
2335 PM_GENERIC_DOMAINS_RUNTIME
2336 CPU_PM
2337 CPU_IDLE
2338 irqdesc.o
2339 handle.o
2340 manage.o
2341 spurious.o
2342 resend.o
2343 chip.o
2344 dummychip.o
2345 devres.o
2346 obj-$(CONFIG_GENERIC_IRQ_CHIP)
2347 generic-chip.o
2348 obj-$(CONFIG_GENERIC_IRQ_PROBE)
2349 autoprobe.o
2350 obj-$(CONFIG_IRQ_DOMAIN)
2351 irqdomain.o
2352 obj-$(CONFIG_PROC_FS)
2353 proc.o
2354 obj-$(CONFIG_GENERIC_PENDING_IRQ)
2355 migration.o
2356 obj-$(CONFIG_PM_SLEEP)
2357 pm.o
2358 activate
2359 irq
2360 below
2361 HAVE_GENERIC_HARDIRQS
2362 "IRQ
2363 subsystem"
2364 subsystem
2365 GENERIC_HARDIRQS
2366 Options
2367 selectable
2368 sparse
2369 Kconfig
2370 HAVE_SPARSE_IRQ
2371 autoprobe
2372 mechanism
2373 GENERIC_IRQ_PROBE
2374 /proc/interrupts
2375 GENERIC_IRQ_SHOW
2376 Print
2377 level/edge
2378 GENERIC_IRQ_SHOW_LEVEL
2379 Support
2380 delayed
2381 migration
2382 GENERIC_PENDING_IRQ
2383 Alpha
2384 affinity
2385 AUTO_IRQ_AFFINITY
2386 Tasklet
2387 based
2388 resend
2389 pending
2390 enable_irq()
2391 HARDIRQS_SW_RESEND
2392 Preflow
2393 handler
2394 fasteoi
2395 (sparc64)
2396 IRQ_PREFLOW_FASTEOI
2397 Edge
2398 style
2399 eoi
2400 (cell)
2401 IRQ_EDGE_EOI_HANDLER
2402 Generic
2403 configurable
2404 chip
2405 GENERIC_IRQ_CHIP
2406 irq_domain
2407 hw
2408 <-->
2409 translation
2410 IRQ_DOMAIN
2411 forced
2412 threading
2413 IRQ_FORCED_THREADING
2414 SPARSE_IRQ
2415 numbering"
2416 Sparse
2417 numbering
2418 distro
2419 kernels
2420 define
2421 high
2422 CONFIG_NR_CPUS
2423 smaller
2424 machines.
2425 irqs
2426 boxes,
2427 spread
2428 descriptors
2429 NUMA-friendly
2430 )
2431 timekeeping.o
2432 ntp.o
2433 clocksource.o
2434 jiffies.o
2435 timer_list.o
2436 timecompare.o
2437 timeconv.o
2438 posix-clock.o
2439 alarmtimer.o
2440 obj-$(CONFIG_GENERIC_CLOCKEVENTS_BUILD)
2441 clockevents.o
2442 obj-$(CONFIG_GENERIC_CLOCKEVENTS)
2443 tick-common.o
2444 obj-$(CONFIG_GENERIC_CLOCKEVENTS_BROADCAST)
2445 tick-broadcast.o
2446 obj-$(CONFIG_TICK_ONESHOT)
2447 tick-oneshot.o
2448 tick-sched.o
2449 obj-$(CONFIG_TIMER_STATS)
2450 timer_stats.o
2451 TICK_ONESHOT
2452 NO_HZ
2453 "Tickless
2454 System
2455 (Dynamic
2456 Ticks)"
2457 GENERIC_CLOCKEVENTS
2458 tickless
2459 system:
2460 trigger
2461 as-needed
2462 basis
2463 busy
2464 idle.
2465 "High
2466 Resolution
2467 resolution
2468 hardware
2469 capable
2470 increases
2471 GENERIC_CLOCKEVENTS_BUILD
2472 GENERIC_CLOCKEVENTS_MIGR
2473 GENERIC_CLOCKEVENTS_MIN_ADJUST
